plugins {
    id 'com.android.application'
    id 'kotlin-android'
//    id 'argus-auto-track-plugin'
//    id 'cn-huolala-asm-plugin'
}
println "app build.gradle start"
//导入自定义编译任务
apply from: "build_task.gradle"
android {
    println "app android closure start"
    compileSdkVersion 29
    buildToolsVersion "30.0.3"
    ndkVersion "21.4.7075529"

    defaultConfig {
        println "app defaultConfig closure in android closure start"
        applicationId "cn.huolala.mytestapplication"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 100
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        println "app defaultConfig closure in android closure end"
    }

    flavorDimensions "brand", "country" //不同维度

    productFlavors {
        xiaomi {
            dimension "brand"
        }
        huawei {
            dimension "brand"
        }
        china {
            dimension "country"
        }
        tailand {
            dimension "country"
        }
    }

    buildTypes {
        println "app buildTypes closure in android closure start"
        //debug包会自动去拿本地默认的签名文件(C:\Users\username\.android\debug.keystore)，即使flavor设置了签名; 除非把signingConfig设置成null
        debug {
            // Set to null to override default debug keystore and defer to the product flavor.
//            signingConfig null //此处设置为null且在flavor里面没有设置签名，产物就不会被签名
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            //release包如果在flavor里面没有设置签名，则产物不会被签名
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        println "app buildTypes closure in android closure end"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    println "app android closure end"
}

def getImplModuleName() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    println tskReqStr
    return tskReqStr
}

dependencies {
    println "app dependencies closure start"
    getImplModuleName()
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    api 'com.squareup.okhttp3:okhttp:3.12.0'

    implementation project(path: ':apt-annotion') //用于编写注解
    annotationProcessor project(path: ":apt-compiler") //用于处理注解，例如生成一些类
    implementation project(path: ":apt-api") //用于api的封装

//    implementation "com.delivery.wp.argus.android:argus:$argus_version"
//    implementation "com.delivery.wp:foundation:$foundation_version"

    implementation project(path: ':test-c') //用于编写c的测试代码的
    //两种依赖方式可替换
//    implementation project(':mylibrary') //用于测试 model
    implementation "com.model.binbin:mylibrary:0.0.9-SNAPSHOT"//用于测试 model
    //两种依赖方式可替换
//    implementation project(':module:a-module')
    implementation "com.model.binbin:a-module:0.0.3-SNAPSHOT"
//内部以来的版本是com.model.binbin:mylibrary:0.0.3-SNAPSHOT

    implementation project(':b-module')
    implementation project(':c-module')
    //火山引擎--apm性能组件
    implementation 'com.volcengine:apm_insight:1.4.10.cn-rc.0'
    //火山引擎--apm稳定性组件
    implementation 'com.volcengine:apm_insight_crash:1.4.6-rc.17'
    //图片加载库
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    //decode webp动画
    implementation "com.github.zjupure:webpdecoder:2.0.4.12.0"
    println "app dependencies closure end"
}

project.beforeEvaluate {
    println "========app project.beforeEvaluate start========"
    println "========app project.beforeEvaluate end========"
}

project.afterEvaluate {
    println "========app project.afterEvaluate start========"
//    project.tasks.all { task ->
//        println "task name = " + task.getName()
//        println "get project name from task = " + task.getProject().getName()
//    }
//    project.plugins
//    project.extensions
    println "project name = " + project.getName()
    println "project path = " + project.getPath()
    println "project dir = " + project.getProjectDir()
    println "project build.gradle dir = " + project.file("build.gradle")
    println "rootProject build.gradle dir = " + rootProject.file("build.gradle")
    println "rootProject name = " + rootProject.getName()
    println "get rootProject name by project = " + project.getRootProject().getName()
    println "get rootProject name by project = " + getRootProject().getName()
    println "get rootDir name by project= " + project.getRootDir()
    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${project.findProperty("NEXUS_USERNAME")}"
    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${project.property("NEXUS_USERNAME")}"
    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${findProperty("NEXUS_USERNAME")}"
    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${property("NEXUS_USERNAME")}"
    println "has property NEXUS_PASSWORD = ${project.hasProperty('NEXUS_PASSWORD')}, result = ${getProperty("NEXUS_PASSWORD")}"
//    properties.each {
//        println "properties key=${it.key},value=${it.value}"
//    }

    getChildProjects().each {
        println "app contain ---------${it.value.name} "
    }
    getSubprojects().each {
        println "app contain ---------${it.value.name} "
    }
    rootProject.getChildProjects().each {
        println "rootProject.getChildProjects() contain --------${it.value.name}"
        println "rootProject.getChildProjects() contain --------${it.value.getProjectDir()}"
    }
    getAllprojects().eachWithIndex { Project entry, int i ->
        if (i == 0) {
            println("CurrentProject-------${entry.name}")
        } else {
            println("SubProject-------${entry.name}")
        }
    }
    rootProject.getAllprojects().eachWithIndex { Project entry, int i ->
        if (i == 0) {
            println("RootProject-------${entry.name}")
        } else {
            println("SubProject-------${entry.name}")
        }
    }

    android.applicationVariants.all { variant ->
        println "\n"
        println "variant.applicationId = $variant.applicationId, variant.name = $variant.name, variant.baseName = $variant.baseName"
        println "variant.versionName = $variant.versionName, variant.versionCode = $variant.versionCode"
        println "variant.description = $variant.description, variant.dirName = $variant.dirName"
        println "variant.flavorName = $variant.flavorName, variant.buildType.name = $variant.buildType.name, variant.buildType.debuggable = $variant.buildType.debuggable"
        println "getProductFlavors size = " + variant.getProductFlavors().size()
        variant.getProductFlavors().each { flavor ->
            println "getProductFlavors name = " + flavor.getName()
        }
        def taskProvider = variant.getCheckManifestProvider()
        println "variant.getCheckManifestProvider() = $taskProvider"
        println "variant.getCheckManifestProvider().getName() = $taskProvider.name"

        variant.outputs.all { output ->
            println "output.name = $output.name, output.baseName = $output.baseName"
            println "output.outputFileName = $output.outputFileName"//文件名
            println "output.outputFile = $output.outputFile"//文件地址
            println "output.outputFile.path = $output.outputFile.path"//文件地址
        }
    }
    println "========app project.afterEvaluate end========"
}

//监听task对象被添加到一个Project
tasks.whenTaskAdded { task ->
//    println "####### $task.name #######" //或输出当前project里面添加所有task名称
}

task testAppTask {
    println "========app $name start======"
    doFirst() {
        println "$name doFirst"
    }
    doLast() {
        println "$name doLast"
    }
    //使用相对路径
    File configFile = file('src/main/java/test.java')
    if (!configFile.exists()) {
        println "========create file ========"
        configFile.createNewFile()
    } else {
        println "========file exists ========"
    }
    println "========app $name end========"
}

task("testAPPTask1", {
    println "========app $name start======"
    doFirst() {
        println "$name doFirst"
    }
    doLast() {
        println "$name doLast"
    }
    // 指定目录创建文件树对象
    FileTree tree = fileTree(dir: 'src/main/assets')
    // 遍历文件树的所有文件
    tree.each { File file ->
        println file
    }
    copy {
        from 'src/main/assets/folder2'
        into 'src/main/assets/folder1'
        //排除test4文件
        exclude { details -> //details is FileTreeElement
            println "details = $details"
            println "details.size = $details.size"
            println "details.file = $details.file"
            details.file.name == "test4"
        }
        //使用一个闭包方式重命名文件
        rename { String fileName ->
            println "fileName = $fileName"
            if (fileName == "test3") {
                fileName.replace("test3", 'test5')
            }
        }
    }
    println "========app $name end========"
})

//gradle.properties 里面的属性是能够在全局properties中获取到的
println "kotlin.code.style = ${property("kotlin.code.style")}"
//local.properties 里面的属性是不能在全局properties中获取到的
//println "sdk.dir = ${property("sdk.dir")}"

println "app build.gradle end"