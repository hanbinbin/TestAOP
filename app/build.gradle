plugins {
    id 'com.android.application'
    id 'kotlin-android'
//    id 'argus-auto-track-plugin'
//    id 'cn-huolala-asm-plugin'
}
println "app build.gradle start"

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"
    ndkVersion "21.1.6352462"

    defaultConfig {
        applicationId "cn.huolala.mytestapplication"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    api 'com.squareup.okhttp3:okhttp:3.12.0'

    implementation project(path: ':apt-annotion') //用于编写注解
    annotationProcessor project(path: ":apt-compiler") //用于处理注解，例如生成一些类
    implementation project(path: ":apt-api") //用于api的封装

//    implementation "com.delivery.wp.argus.android:argus:$argus_version"
//    implementation "com.delivery.wp:foundation:$foundation_version"

    implementation project(path: ':test-c') //用于编写c的测试代码的
    //两种依赖方式可替换
//    implementation project(':mylibrary') //用于测试 model
    implementation "com.model.binbin:mylibrary:0.0.4-SNAPSHOT"//用于测试 model
    //两种依赖方式可替换
//    implementation project(':module:a-module')
    implementation "com.model.binbin:a-module:0.0.2-SNAPSHOT"//内部以来的版本是com.model.binbin:mylibrary:0.0.3-SNAPSHOT

    implementation project(':b-module')
    implementation project(':c-module')
    //火山引擎--apm性能组件
    implementation 'com.volcengine:apm_insight:1.4.10.cn-rc.0'
    //火山引擎--apm稳定性组件
    implementation 'com.volcengine:apm_insight_crash:1.4.6-rc.17'
    //图片加载库
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    //decode webp动画
    implementation "com.github.zjupure:webpdecoder:2.0.4.12.0"
}

project.afterEvaluate {
    println "========app project.afterEvaluate start========"
//    project.tasks.all { task ->
//        println "task name = " + task.getName()
//        println "get project name from task = " + task.getProject().getName()
//    }
//    project.plugins
//    project.extensions

    println "project name = " + project.getName()
    println "project path = " + project.getPath()
    println "project dir = " + project.getProjectDir()
    println "project build.gradle dir = " + project.file("build.gradle")
    println "rootProject build.gradle dir = " + rootProject.file("build.gradle")
    println "rootProject name = " + rootProject.getName()
    println "get rootProject name by project = " + project.getRootProject().getName()
    println "get rootDir name by project= " + project.getRootDir()

    def childProjects1 = rootProject.getChildProjects()
    childProjects1.each {
        println "rootProject contain key=${it.key},value=${it.value}"
    }

    childProjects.each {
        println "app contain key=${it.key},value=${it.value} "
    }

    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${project.findProperty("NEXUS_USERNAME")}"
    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${project.property("NEXUS_USERNAME")}"
    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${findProperty("NEXUS_USERNAME")}"
    println "has property NEXUS_USERNAME = ${project.hasProperty('NEXUS_USERNAME')}, result = ${property("NEXUS_USERNAME")}"
    println "has property NEXUS_PASSWORD = ${project.hasProperty('NEXUS_PASSWORD')}, result = ${getProperty("NEXUS_PASSWORD")}"

//    properties.each {
//        println "properties key=${it.key},value=${it.value}"
//    }

    project.android.applicationVariants.all { variant ->
        println "getApplicationId = " + variant.getApplicationId()
        println "name = " + variant.getName()
        println "baseName = " + variant.getBaseName()
        println "description = " + variant.getDescription()
        println "dirName = " + variant.getDirName()
        println "getFlavorName = " + variant.getFlavorName()
        println "getBuildType   name = " + variant.getBuildType().getName() + ", isDebug = " + variant.getBuildType().isDebuggable()
        println "getProductFlavors   size = " + variant.getProductFlavors().size()
//        println "getProductFlavors   name = " + variant.getProductFlavors().get(0).getName()

        def taskProvider = variant.getCheckManifestProvider()
        println taskProvider.getName()

        def task = variant.getCheckManifest()
        println task.getName()
    }
    println "========app project.afterEvaluate end========"
}

println "app build.gradle end"